apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: ${{ values.cluster_name }}-pipeline 
spec:
  workspaces:
  - name: aws-credentials-secret
  - name: rosa-config-workspace
  - name: shared-workspace
  - name: kubeconfig-workspace
  - name: manifest-workspace
  - name: basic-auth

  params:  
#  - name: rosa-token
#    type: string
  - name: rosa-cluster-name
    type: string
  - name: rosa-region
    type: string
  - name: operator-role-prefix
    type: string
  - name: rosa-version
    type: string
  - name: node-min-replicas 
    type: string
  - name: node-max-replicas
    type: string
  - name: rosa-machine-type
    type: string
  - name: enable-autoscaling
    type: string
#  - name: oidc-config-id
#    type: string
#  - name: rosa-cidr
#    type: string
#  - name: INIT_ARGS
#    type: string
#  - name: ARGS
#    type: string
  - name: git-url
    type: string
  - name: git-revision
    type: string
#  - name: default-route-host
#    type: string
#  - name: app-namespace
#    type: string
#  - name: application-name
#    type: string
#  - name: revision
#    type: string
#  - name: app-host
#    type: string
#  - name: zone-id
#    type: string
#  - name: db-vpc-id
#    type: string
#  - name: db-vpc-cidr
#    type: string
#  - name: db-region
#    type: string

  tasks:
  - name: git-clone
    taskRef:
      kind: Task
      name: git-clone
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.git-revision)
    workspaces:
    - name: output 
      workspace: manifest-workspace
    - name: basic-auth
      workspace: basic-auth

  - name: create-vpc
    taskRef:
      kind: Task
      name: terraform-cli
    workspaces:
    - name: source
      workspace: manifest-workspace
    - name: shared
      workspace: shared-workspace
    params:
     - name: terraform-secret
       value: "aws-credentials"
     - name: INIT_ARGS
       value:
#       - "terraform init -backend-config=develop.tfbackend"
       - init
       - "-backend-config=develop.tfbackend"
     - name: ARGS
       value:
#       - "terraform apply -auto-approve"
       - apply
       - "-auto-approve"
    runAfter:
    - git-clone

#  - name: get-vpc-outputs
#    taskRef:
#      name: terraform-cli
#    workspaces:
#    - name: source
#      workspace: manifest-workspace
#    - name: shared
#      workspace: shared-workspace
#    params:
#     - name: terraform-secret
#       value: "aws-credentials"
#     - name: INIT_ARGS
#       value:
#       - "terraform init -backend-config=develop.tfbackend"
##       - init
##       - "-backend-config=develop.tfbackend"
#     - name: ARGS
#       value:
#       - "terraform output subnet_ids > $(workspaces.shared.path)/subnet_ids"
##       - output
##       - "subnet_ids"
##       - "> $(workspaces.shared.path)/subnet_ids"
#    runAfter:
#    - create-vpc

  - name: rosa-init
    taskRef:
      kind: Task
      name: aws-rosa-cli
    params:
    - name: rosa-cluster-name
      value: $(params.rosa-cluster-name)
    - name: SCRIPT
      value: |
        rosa login --token $ROSA_TOKEN
        rosa init --region $(params.rosa-region)
        rosa create account-roles --force-policy-creation --mode auto --hosted-cp 
        INSTALLER_ROLE_ARN=$(rosa list account-roles | grep HCP-ROSA-Installer | awk '{print $3}')
        rosa create operator-roles --prefix $(params.operator-role-prefix) --oidc-config-id $OIDC_CONFIG_ID --installer-role-arn $INSTALLER_ROLE_ARN --mode auto --hosted-cp
    workspaces:
    - name: aws-creds
      workspace: aws-credentials-secret
    - name: rosa-config
      workspace: rosa-config-workspace
    - name: shared
      workspace: shared-workspace
    runAfter:
    - git-clone

  - name: create-cluster
    taskRef:
      kind: Task
      name: aws-rosa-cli
    params: 
    - name: rosa-cluster-name
      value: $(params.rosa-cluster-name)
    - name: SCRIPT 
      value: |
        #/bin/bash
        rosa login --token $ROSA_TOKEN
        if [[ ! $(rosa list cluster | grep $(params.rosa-cluster-name) ) ]] ; then
        SUBNET_IDS=$(cat $(workspaces.shared.path)/subnet_ids)
        rosa create cluster --cluster-name $(params.rosa-cluster-name) --sts \
          --operator-roles-prefix $(params.operator-role-prefix) \
          --oidc-config-id $OIDC_CONFIG_ID \
          --region $(params.rosa-region) \
          --version $(params.rosa-version) \
          --min-replicas $(params.node-min-replicas) \
          --max-replicas $(params.node-max-replicas) \
          --compute-machine-type $(params.rosa-machine-type) \
          --machine-cidr 10.0.0.0/16 \
          --service-cidr 172.30.0.0/16 \
          --pod-cidr 10.128.0.0/14 \
          --host-prefix 23 \
          --subnet-ids $SUBNET_IDS \
          --enable-autoscaling $(params.enable-autoscaling) \
          --hosted-cp
          #--dry-run
        else
          echo "ROSA Cluster \"$(params.rosa-cluster-name)\" already exists."
        fi 
    workspaces:
    - name: aws-creds
      workspace: aws-credentials-secret
    - name: rosa-config
      workspace: rosa-config-workspace
    - name: shared
      workspace: shared-workspace
    runAfter:
    - rosa-init
    - create-vpc

  - name: check-cluster
    taskRef:
      kind: Task
      name: aws-rosa-cli
    timeout: "1h30m0s"
    params: 
    - name: rosa-cluster-name
      value: $(params.rosa-cluster-name)
    - name: SCRIPT
      value: |
        #/bin/bash
        rosa login --token $ROSA_TOKEN
        while [[ ! $(rosa list cluster | grep $(params.rosa-cluster-name) | grep "ready") ]] ;
        do
          echo "ROSA Cluster \"$(params.rosa-cluster-name)\" is not ready."
          echo "wait 10 seconds and retry..."
          sleep 10
        done
        echo "ROSA Cluster \"$(params.rosa-cluster-name)\" is ready."
    workspaces:
    - name: aws-creds
      workspace: aws-credentials-secret
    - name: rosa-config
      workspace: rosa-config-workspace
    - name: kubeconfig
      workspace: kubeconfig-workspace
    runAfter:
    - create-cluster
 
  - name: create-cluster-admin
    taskRef:
      kind: Task
      name: aws-rosa-cli 
    params: 
    - name: rosa-cluster-name
      value: $(params.rosa-cluster-name)
    - name: SCRIPT
      value: |
        #/bin/bash
        rosa login --token $ROSA_TOKEN
        set +e
        rosa create admin --cluster=$(params.rosa-cluster-name) > $(workspaces.shared.path)/stdout.txt
        if [[ $(cat $(workspaces.shared.path)/stdout.txt | grep "oc login") ]] ; then
          cat $(workspaces.shared.path)/stdout.txt | grep "oc login" > $(workspaces.shared.path)/command.txt
        fi
        #cat $(workspaces.shared.path)/command.txt
        rosa describe cluster --cluster=$(params.rosa-cluster-name) | grep DNS | awk '{print $2}' > $(workspaces.shared.path)/cluster-url.txt
        while true ;
        do
          $(cat $(workspaces.shared.path)/command.txt) --insecure-skip-tls-verify
          ret=$?
          if [ $ret -eq 0 ] ; then
            break
          else
            echo "\"$(params.rosa-cluster-name)\" Cluster-admin user is not ready."
            echo "wait 10 seconds and retry..."
            sleep 10
          fi
        done 
    workspaces:
    - name: aws-creds
      workspace: aws-credentials-secret
    - name: rosa-config
      workspace: rosa-config-workspace
    - name: shared
      workspace: shared-workspace
    - name: kubeconfig
      workspace: kubeconfig-workspace
    runAfter:
    - check-cluster

  - name: argocd-settings
    taskRef:
      kind: Task
      name: aws-rosa-cli 
    params:
    - name: rosa-cluster-name
      value: $(params.rosa-cluster-name)
    - name: SCRIPT
      value: |
        rosa login --token $ROSA_TOKEN
        DEST_ROSA_URL=$(cat $(workspaces.shared.path)/cluster-url.txt | sed 's/\./-/g')
        oc login $ROSA_API_URL:443 --username=$ROSA_USER --password=$ROSA_PASSWORD --insecure-skip-tls-verify
        curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
        chmod +x /usr/local/bin/argocd
        rm -rf /root/.config/argocd
        argocd login $ARGOCD_URL --username $ARGOCD_USER --password $ARGOCD_PASSWORD --insecure
        argocd cluster add default/api-$DEST_ROSA_URL:443/cluster-admin
    workspaces:
    - name: aws-creds
      workspace: aws-credentials-secret
    - name: rosa-config
      workspace: rosa-config-workspace
    - name: manifest
      workspace: manifest-workspace
    - name: shared
      workspace: shared-workspace
    - name: kubeconfig
      workspace: kubeconfig-workspace
    runAfter:
    - create-cluster-admin

  - name: register-rosa-htpasswd
    taskRef:
      kind: Task
      name: aws-rosa-cli
    params:
    - name: rosa-cluster-name
      value: $(params.rosa-cluster-name)
    - name: SCRIPT
      value: |
        rosa login --token $ROSA_TOKEN
        rosa create idp --type htpasswd --users $ROSA_USERNAME:$ROSA_PASSWORD --cluster=$(params.rosa-cluster-name) 
    workspaces:
    - name: aws-creds
      workspace: aws-credentials-secret
    - name: rosa-config
      workspace: rosa-config-workspace
    - name: manifest
      workspace: manifest-workspace
    - name: shared
      workspace: shared-workspace
    - name: kubeconfig
      workspace: kubeconfig-workspace
    runAfter:
    - argocd-settings

#  - name: install-argocd
#    taskRef:
#      name: openshift-client
#    workspaces:
#      - name: manifest-dir
#        workspace: manifest-workspace
#      - name: kubeconfig-dir
#        workspace: kubeconfig-workspace
#    params:
#    - name: SCRIPT
#      value: |
#        oc apply -f cluster-manifest/k8s/operator
#        while ! oc get csv -n openshift-operators -l operators.coreos.com/openshift-gitops-operator.openshift-operators | grep Succeeded; do sleep 10; done 
#        oc apply -f cluster-manifest/k8s/openshift-gitops
#    runAfter:
#    - decrypt-secret
#    - create-cluster-admin
#
#  - name: argocd-access-configuration
#    taskRef:
#      name: openshift-client
#    workspaces:
#    - name: manifest-dir
#      workspace: manifest-workspace
#    - name: kubeconfig-dir
#      workspace: kubeconfig-workspace
#    - name: shared
#      workspace: shared-workspace
#    params:
#    - name: SCRIPT
#      value: |
#        oc get route openshift-gitops-server -n openshift-gitops --template="{{.spec.host}}" > $(workspaces.shared.path)/argocd-server.txt
#        oc -n openshift-gitops get secret openshift-gitops-cluster -o jsonpath="{.data['admin\.password']}" | base64 --decode > $(workspaces.shared.path)/argocd-password.txt
#    runAfter:
#    - install-argocd
#
#  - name: prepare-deploy
#    taskRef:
#      name: openshift-client
#    workspaces:
#    - name: manifest-dir
#      workspace: manifest-workspace
#    - name: kubeconfig-dir
#      workspace: kubeconfig-workspace
#    params:
#    - name: SCRIPT
#      value: |
#        oc apply -f cluster-manifest/k8s/app/project.yaml
#        oc create secret docker-registry pull-secret --docker-server=$(params.default-route-host) --docker-username=serviceaccount --docker-password=$(cat $(workspaces.manifest-dir.path)/cluster-manifest/k8s/app/secrets/pull-secret.txt) --docker-email=unused -n $(params.app-namespace)
#        oc patch sa/builder --patch '{"imagePullSecrets":[{"name":"pull-secret"}]}' --type merge -n $(params.app-namespace) 
#        oc import-image -n $(params.app-namespace) $(params.default-route-host)/$(params.app-namespace)/nginx --confirm
#        oc import-image -n $(params.app-namespace) $(params.default-route-host)/$(params.app-namespace)/django --confirm
#    runAfter:
#    - decrypt-secret
#    - create-cluster-admin
#
#  - name: sync-application
#    taskRef:
#      name: argocd-task-sync-and-wait
#    workspaces:
#    - name: shared
#      workspace: shared-workspace
#    params:
#    - name: SCRIPT
#      value: |
#        echo "argo login"
#         while ! yes | argocd login --insecure $(cat $(workspaces.shared.path)/argocd-server.txt) --username="admin" --password=$(cat $(workspaces.shared.path)/argocd-password.txt) ; do sleep 10; done
#        echo "execute argo sync"
#        argocd app sync $(params.application-name) --revision $(params.revision) --insecure 
#        echo "execute argo wait"
#        argocd app wait $(params.application-name) --health --insecure
#    runAfter:
#    - argocd-access-configuration
#    - prepare-deploy
#
#  - name: change-route53-record
#    taskRef:
#      name: aws-rosa-cli
#    params:
#    - name: SCRIPT
#      value: |
#        export INGRESS_RECORD=$(oc get ingresscontroller default -n openshift-ingress-operator -o jsonpath='{.status.domain}')
#        export APP_HOST=$(params.app-host)
#        envsubst < $(workspaces.manifest.path)/cluster-manifest/other/record_tmp.json > $(workspaces.manifest.path)/cluster-manifest/other/record.json
#        aws route53 change-resource-record-sets --hosted-zone-id $(params.zone-id) --change-batch file://$(workspaces.manifest.path)/cluster-manifest/other/record.json
#    workspaces:
#    - name: aws-creds
#      workspace: aws-credentials-secret
#    - name: rosa-config
#      workspace: rosa-config-workspace
#    - name: manifest
#      workspace: manifest-workspace
#    - name: kubeconfig
#      workspace: kubeconfig-workspace
#    runAfter:
#    - sync-application
